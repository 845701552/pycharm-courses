{
  "lessons": [
    {
      "id": 13416,
      "title": "Introduction",
      "task_list": [
        {
          "name": "Our first program",
          "stepic_id": 98626,
          "task_files": {
            "hello_world.py": {
              "name": "hello_world.py",
              "text": "print(\"Hello, world! My name is type your name\")\n",
              "placeholders": [
                {
                  "hint": "Type your name here.",
                  "additional_hints": [],
                  "possible_answer": "Liana",
                  "offset": 32,
                  "length": 14
                }
              ]
            }
          }
        },
        {
          "name": "Comments",
          "stepic_id": 98627,
          "task_files": {
            "comments.py": {
              "name": "comments.py",
              "text": "# This is the comment for the comments.py file\nprint(\"Hello!\")  # this comment is for the second line\n\nprint(\"# this is not a comment\")\n# add new comment here\n",
              "placeholders": [
                {
                  "hint": "Type your new comment here.",
                  "additional_hints": [],
                  "possible_answer": "new comment",
                  "offset": 138,
                  "length": 20
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 13417,
      "title": "Variables",
      "task_list": [
        {
          "name": "Variable definition",
          "stepic_id": 98628,
          "task_files": {
            "variable_definition.py": {
              "name": "variable_definition.py",
              "text": "a \u003d b \u003d 2  # This is called a \"chained assignment\". It assigns the value 2 to variables \"a\" and \"b\".\nprint(\"a \u003d \" + str(a))   # We\u0027ll explain the expression str(a) later in the course. For now it is used to convert the  variable \"a\" to a string.\nprint(\"b \u003d \" + str(b))\n\ngreetings \u003d \"greetings\"\nprint(\"greetings \u003d \" + str(greetings))\ngreetings \u003d another value\nprint(\"greetings \u003d \" + str(greetings))\n",
              "placeholders": [
                {
                  "hint": "Type value here.",
                  "additional_hints": [],
                  "possible_answer": "5",
                  "offset": 345,
                  "length": 13
                }
              ]
            }
          }
        },
        {
          "name": "Undefined variable",
          "stepic_id": 98629,
          "task_files": {
            "undefined_variable.py": {
              "name": "undefined_variable.py",
              "text": "variable \u003d 1\nprint(other variable)\n",
              "placeholders": [
                {
                  "hint": "Type the name of an undefined variable here. Note that variable names must start with a letter and may contain letters, \u0027_\u0027 and/or numbers.",
                  "additional_hints": [],
                  "possible_answer": "other_variable",
                  "offset": 19,
                  "length": 14
                }
              ]
            }
          }
        },
        {
          "name": "Variable types",
          "stepic_id": 98630,
          "task_files": {
            "variable_type.py": {
              "name": "variable_type.py",
              "text": "number \u003d 9\nprint(type(number))   # print type of variable \"number\"\n\nfloat_number \u003d 9.0\nprint(float_number type)\n",
              "placeholders": [
                {
                  "hint": "Look how we found the \"number\" type on line 2 and do the same to float_number.",
                  "additional_hints": [],
                  "possible_answer": "type(float_number)",
                  "offset": 93,
                  "length": 17
                }
              ]
            }
          }
        },
        {
          "name": "Type conversion",
          "stepic_id": 98631,
          "task_files": {
            "type_cast.py": {
              "name": "type_cast.py",
              "text": "number \u003d 9\nprint(type(number))   # print type of variable \"number\"\n\nfloat_number \u003d 9.0\nprint(float_number)\nprint(Convert float_number to integer)\n",
              "placeholders": [
                {
                  "hint": "Use int() function.",
                  "additional_hints": [],
                  "possible_answer": "int(float_number)",
                  "offset": 113,
                  "length": 31
                }
              ]
            }
          }
        },
        {
          "name": "Arithmetic operators",
          "stepic_id": 98632,
          "task_files": {
            "arithmetic_operators.py": {
              "name": "arithmetic_operators.py",
              "text": "number \u003d 9.0        # float number\n\nresult \u003d divide \u0027number\u0027 by two\n\nremainder \u003d calculate the remainder\n\nprint(\"result \u003d \" + str(result))\nprint(\"remainder \u003d \" + str(remainder))\n",
              "placeholders": [
                {
                  "hint": "Use / operator.",
                  "additional_hints": [],
                  "possible_answer": "number / 2",
                  "offset": 45,
                  "length": 22
                },
                {
                  "hint": "Use % operator.",
                  "additional_hints": [],
                  "possible_answer": "number % 2",
                  "offset": 81,
                  "length": 23
                }
              ]
            }
          }
        },
        {
          "name": "Assignments",
          "stepic_id": 98633,
          "task_files": {
            "assignments.py": {
              "name": "assignments.py",
              "text": "number \u003d 9.0\nprint(\"number \u003d \" + str(number))\n\nnumber -\u003d 2\nprint(\"number \u003d \" + str(number))\n\nnumber operator 5\n\nprint(\"number \u003d \" + str(number))\n",
              "placeholders": [
                {
                  "hint": "Use +\u003d operator.",
                  "additional_hints": [],
                  "possible_answer": "+\u003d",
                  "offset": 100,
                  "length": 8
                }
              ]
            }
          }
        },
        {
          "name": "Boolean operators",
          "stepic_id": 98634,
          "task_files": {
            "boolean_operators.py": {
              "name": "boolean_operators.py",
              "text": "two \u003d 2\nthree \u003d 3\n\nis_equal \u003d two operator three\n\nprint(is_equal)\n",
              "placeholders": [
                {
                  "hint": "Use \u003d\u003d operator.",
                  "additional_hints": [],
                  "possible_answer": "\u003d\u003d",
                  "offset": 34,
                  "length": 8
                }
              ]
            }
          }
        },
        {
          "name": "Comparison operators",
          "stepic_id": 98635,
          "task_files": {
            "comparison_operators.py": {
              "name": "comparison_operators.py",
              "text": "one \u003d 1\ntwo \u003d 2\nthree \u003d 3\n\nprint(one \u003c two \u003c three)  # This chained comparison means that the (one \u003c two) and (two \u003c three) comparisons are performed at the same time.\n\nis_greater \u003d three operator two\nprint(is_greater)\n",
              "placeholders": [
                {
                  "hint": "Use \u003e operator.",
                  "additional_hints": [],
                  "possible_answer": "\u003e",
                  "offset": 188,
                  "length": 8
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 13419,
      "title": "Strings",
      "task_list": [
        {
          "name": "Concatenation",
          "stepic_id": 98660,
          "task_files": {
            "concatenation.py": {
              "name": "concatenation.py",
              "text": "hello \u003d \"Hello\"\nworld \u003d \u0027World\u0027\n\nhello_world \u003d type here\nprint(hello_world)      # Note: you should print \"Hello World\"\n",
              "placeholders": [
                {
                  "hint": "Use chained concatenation and one-space string \\\" \\\".",
                  "additional_hints": [],
                  "possible_answer": "hello + \u0027 \u0027 + world",
                  "offset": 47,
                  "length": 9
                }
              ]
            }
          }
        },
        {
          "name": "String multiplication",
          "stepic_id": 98661,
          "task_files": {
            "string_multiplication.py": {
              "name": "string_multiplication.py",
              "text": "hello \u003d \"hello\"\nten_of_hellos \u003d hello operator 10\nprint(ten_of_hellos)\n",
              "placeholders": [
                {
                  "hint": "Use multiplication.",
                  "additional_hints": [],
                  "possible_answer": "*",
                  "offset": 38,
                  "length": 8
                }
              ]
            }
          }
        },
        {
          "name": "String indexing",
          "stepic_id": 98662,
          "task_files": {
            "string_indexing.py": {
              "name": "string_indexing.py",
              "text": "python \u003d \"Python\"\nprint(\"h \" + python[3])     # Note: string indexing starts with 0\n\np_letter \u003d type here\nprint(p_letter)\n",
              "placeholders": [
                {
                  "hint": "Note that index starts with 0.",
                  "additional_hints": [],
                  "possible_answer": "python[0]",
                  "offset": 96,
                  "length": 9
                }
              ]
            }
          }
        },
        {
          "name": "String negative indexing",
          "stepic_id": 98663,
          "task_files": {
            "negative_indexing.py": {
              "name": "negative_indexing.py",
              "text": "long_string \u003d \"This is a very long string!\"\nexclamation \u003d type here\nprint(exclamation)\n",
              "placeholders": [
                {
                  "hint": "Use negative index.",
                  "additional_hints": [],
                  "possible_answer": "long_string[-1]",
                  "offset": 58,
                  "length": 9
                }
              ]
            }
          }
        },
        {
          "name": "String slicing",
          "stepic_id": 98664,
          "task_files": {
            "slicing.py": {
              "name": "slicing.py",
              "text": "monty_python \u003d \"Monty Python\"\nmonty \u003d monty_python[:5]      # one or both index could be dropped. monty_python[:5] is equal to monty_python[0:5]\nprint(monty)\npython \u003d type here\nprint(python)\n",
              "placeholders": [
                {
                  "hint": "You can leave one or both indices empty.",
                  "additional_hints": [],
                  "possible_answer": "monty_python[6:]",
                  "offset": 167,
                  "length": 9
                }
              ]
            }
          }
        },
        {
          "name": "In operator",
          "stepic_id": 98665,
          "task_files": {
            "in_operator.py": {
              "name": "in_operator.py",
              "text": "ice_cream \u003d \"ice cream\"\nprint(\"cream\" in ice_cream)    # print boolean result directly\n\ncontains \u003d type here\nprint(contains)\n",
              "placeholders": [
                {
                  "hint": "Use \u0027in\u0027 operator.",
                  "additional_hints": [],
                  "possible_answer": "\u0027ice\u0027 in ice_cream",
                  "offset": 99,
                  "length": 9
                }
              ]
            }
          }
        },
        {
          "name": "String length",
          "stepic_id": 98666,
          "task_files": {
            "len_function.py": {
              "name": "len_function.py",
              "text": "phrase \u003d \"\"\"\nIt is a really long string\ntriple-quoted strings are used\nto define multi-line strings\n\"\"\"\nfirst_half \u003d type here\nprint(first_half)\n",
              "placeholders": [
                {
                  "hint": "Remember about string slicing.",
                  "additional_hints": [],
                  "possible_answer": "phrase[:int(len(phrase)/2)]",
                  "offset": 117,
                  "length": 9
                }
              ]
            }
          }
        },
        {
          "name": "Character escaping",
          "stepic_id": 98667,
          "task_files": {
            "character_escaping.py": {
              "name": "character_escaping.py",
              "text": "dont_worry \u003d \"Don\u0027t worry about apostrophes\"\nprint(dont_worry)\nprint(\"\\\"Sweeet\\\" is an ice-cream\")\nprint(\u0027text\u0027)\n",
              "placeholders": [
                {
                  "hint": "Use backslash \\\\ to escape quotes.",
                  "additional_hints": [],
                  "possible_answer": "The name of this ice-cream is \"Sweeet\\\u0027n\\\u0027Tasty\"",
                  "offset": 106,
                  "length": 4
                }
              ]
            }
          }
        },
        {
          "name": "Basic string methods",
          "stepic_id": 98668,
          "task_files": {
            "string_methods.py": {
              "name": "string_methods.py",
              "text": "monty_python \u003d \"Monty Python\"\nprint(monty_python)\n\nprint(monty_python.lower())    # print lower-cased version of the string\n\nprint(upper cased monty_python)\n",
              "placeholders": [
                {
                  "hint": "Look at the lower() method usage.",
                  "additional_hints": [],
                  "possible_answer": "monty_python.upper()",
                  "offset": 131,
                  "length": 24
                }
              ]
            }
          }
        },
        {
          "name": "String formatting",
          "stepic_id": 98669,
          "task_files": {
            "string_formatting.py": {
              "name": "string_formatting.py",
              "text": "name \u003d \"John\"\nprint(\"Hello, PyCharm! My name is %s!\" % name)     # Note: %s is inside the string, % is after the string\n\nprint(\"I\u0027m special symbol years old\" % years)\n",
              "placeholders": [
                {
                  "hint": "Use %d special symbol.",
                  "additional_hints": [],
                  "possible_answer": "%d",
                  "offset": 132,
                  "length": 14
                },
                {
                  "hint": "How old are you?",
                  "additional_hints": [],
                  "possible_answer": "17",
                  "offset": 160,
                  "length": 5
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 13420,
      "title": "Data structures",
      "task_list": [
        {
          "name": "Lists introduction",
          "stepic_id": 98678,
          "task_files": {
            "lists.py": {
              "name": "lists.py",
              "text": "squares \u003d [1, 4, 9, 16, 25]   # create new list\nprint(squares)\n\nprint(slice)\n",
              "placeholders": [
                {
                  "hint": "Use list slicing lst[index1:index2]",
                  "additional_hints": [],
                  "possible_answer": "squares[1:4]",
                  "offset": 70,
                  "length": 5
                }
              ]
            }
          }
        },
        {
          "name": "Lists operations",
          "stepic_id": 98679,
          "task_files": {
            "list_operations.py": {
              "name": "list_operations.py",
              "text": "animals \u003d [\u0027elephant\u0027, \u0027lion\u0027, \u0027tiger\u0027, \"giraffe\"]  # create new list\nprint(animals)\n\nanimals +\u003d [\"monkey\", \u0027dog\u0027]    # add two items to the list\nprint(animals)\n\nanimals.append(\"dino\")   # add one more item to the list using append() method\nprint(animals)\n\nreplace \u0027dino\u0027 with \u0027dinosaur\u0027\nprint(animals)\n",
              "placeholders": [
                {
                  "hint": "Use indexing operation and assignment.",
                  "additional_hints": [],
                  "possible_answer": "animals[-1] \u003d \u0027dinosaur\u0027",
                  "offset": 257,
                  "length": 30
                }
              ]
            }
          }
        },
        {
          "name": "List items",
          "stepic_id": 98680,
          "task_files": {
            "list_items.py": {
              "name": "list_items.py",
              "text": "animals \u003d [\u0027elephant\u0027, \u0027lion\u0027, \u0027tiger\u0027, \"giraffe\", \"monkey\", \u0027dog\u0027]   # create new list\nprint(animals)\n\nanimals[1:3] \u003d [\u0027cat\u0027]    # replace 2 items -- \u0027lion\u0027 and \u0027tiger\u0027 with one item -- \u0027cat\u0027\nprint(animals)\n\nanimals[1:3] \u003d []     # remove 2 items -- \u0027cat\u0027 and \u0027giraffe\u0027 from the list\nprint(animals)\n\nclear list\nprint(animals)\n",
              "placeholders": [
                {
                  "hint": "Use assignment to an empty list [].",
                  "additional_hints": [],
                  "possible_answer": "animals[:] \u003d []",
                  "offset": 301,
                  "length": 10
                }
              ]
            }
          }
        },
        {
          "name": "Tuples",
          "stepic_id": 98681,
          "task_files": {
            "tuples.py": {
              "name": "tuples.py",
              "text": "alphabet \u003d (\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027e\u0027, \u0027f\u0027, \u0027g\u0027, \u0027h\u0027, \u0027i\u0027, \u0027j\u0027, \u0027k\u0027, \u0027l\u0027, \u0027m\u0027, \u0027n\u0027, \u0027o\u0027,\n            \u0027p\u0027, \u0027q\u0027, \u0027r\u0027, \u0027s\u0027, \u0027t\u0027, \u0027u\u0027, \u0027v\u0027, \u0027w\u0027, \u0027x\u0027, \u0027y\u0027, \u0027z\u0027)\n\nprint(alphabet length)\n",
              "placeholders": [
                {
                  "hint": "Use len() function.",
                  "additional_hints": [],
                  "possible_answer": "len(alphabet)",
                  "offset": 161,
                  "length": 15
                }
              ]
            }
          }
        },
        {
          "name": "Dictionaries",
          "stepic_id": 98682,
          "task_files": {
            "dicts.py": {
              "name": "dicts.py",
              "text": "# create new dictionary.\nphone_book \u003d {\"John\": 123, \"Jane\": 234, \"Jerard\": 345}    # \"John\", \"Jane\" and \"Jerard\" are keys and numbers are values\nprint(phone_book)\n\n# Add new item to the dictionary\nphone_book[\"Jill\"] \u003d 345\nprint(phone_book)\n\n# Remove key-value pair from phone_book\ndel phone_book[\u0027John\u0027]\n\nprint(Jane\u0027s phone)\n",
              "placeholders": [
                {
                  "hint": "Use dict indexing e.g. dct[key]",
                  "additional_hints": [],
                  "possible_answer": "phone_book[\u0027Jane\u0027]",
                  "offset": 311,
                  "length": 12
                }
              ]
            }
          }
        },
        {
          "name": "Dictionary keys() and values()",
          "stepic_id": 98683,
          "task_files": {
            "dict_key_value.py": {
              "name": "dict_key_value.py",
              "text": "phone_book \u003d {\"John\": 123, \"Jane\": 234, \"Jerard\": 345}  # create new dictionary\nprint(phone_book)\n\n# Add new item to the dictionary\nphone_book[\"Jill\"] \u003d 456\nprint(phone_book)\n\nprint(phone_book.keys())\n\nprint(phone_book values)\n",
              "placeholders": [
                {
                  "hint": "Use values() method.",
                  "additional_hints": [],
                  "possible_answer": "phone_book.values()",
                  "offset": 208,
                  "length": 17
                }
              ]
            }
          }
        },
        {
          "name": "In keyword",
          "stepic_id": 98684,
          "task_files": {
            "in_keyword.py": {
              "name": "in_keyword.py",
              "text": "grocery_list \u003d [\"fish\", \"tomato\", \u0027apples\u0027]   # create new list\n\nprint(\"tomato\" in grocery_list)    # check that grocery_list contains \"tomato\" item\n\ngrocery_dict \u003d {\"fish\": 1, \"tomato\": 6, \u0027apples\u0027: 3}   # create new dictionary\n\nprint(is \u0027fish\u0027 in grocery_dict keys)\n",
              "placeholders": [
                {
                  "hint": "Use in keyword.",
                  "additional_hints": [],
                  "possible_answer": "\u0027fish\u0027 in grocery_dict.keys()",
                  "offset": 236,
                  "length": 30
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 13422,
      "title": "Condition expressions",
      "task_list": [
        {
          "name": "Boolean operators",
          "stepic_id": 98685,
          "task_files": {
            "boolean_operators.py": {
              "name": "boolean_operators.py",
              "text": "name \u003d \"John\"\nage \u003d 17\n\nprint(name \u003d\u003d \"John\" or age \u003d\u003d 17)    # checks that either name equals to \"John\" OR age equals to 17\n\nprint(John is not 23 years old)\n",
              "placeholders": [
                {
                  "hint": "Use and keyword and !\u003d operator.",
                  "additional_hints": [],
                  "possible_answer": "name \u003d\u003d \u0027John\u0027 and age !\u003d 23",
                  "offset": 132,
                  "length": 24
                }
              ]
            }
          }
        },
        {
          "name": "Boolean operators order",
          "stepic_id": 98686,
          "task_files": {
            "boolean_order.py": {
              "name": "boolean_order.py",
              "text": "name \u003d \"John\"\nage \u003d 17\n\nprint(name \u003d\u003d \"John\" or not age \u003e 17)\n\nprint(name \u003d\u003d \"John\" or not age \u003e 17)\n\nprint(\"name\" is \"Ellis\" or not (\"name\" equal \"John\" and he is 17 years old))\n",
              "placeholders": [
                {
                  "hint": "Combine \u0027and\u0027, \u0027or\u0027 and \u0027not\u0027 keywords.",
                  "additional_hints": [],
                  "possible_answer": "\"name\" is \"Ellis\" or not (\"name\" is \"John\" and age \u003d\u003d 17)",
                  "offset": 108,
                  "length": 69
                }
              ]
            }
          }
        },
        {
          "name": "If statement",
          "stepic_id": 98687,
          "task_files": {
            "if_statement.py": {
              "name": "if_statement.py",
              "text": "name \u003d \"John\"\nage \u003d 17\n\nif name \u003d\u003d \"John\" or age \u003d\u003d 17:   # check that name is \"John\" or age is 17. If so print next 2 lines.\n    print(\"name is John\")\n    print(\"John is 17 years old\")\n\ntasks \u003d [\u0027task1\u0027, \u0027task2\u0027]    # create new list\n\ncheck if \u0027tasks\u0027 is empty\n    print(\"empty\")\n",
              "placeholders": [
                {
                  "hint": "Use len function to check if tasks is empty.",
                  "additional_hints": [],
                  "possible_answer": "if len(tasks) \u003d\u003d 0:",
                  "offset": 236,
                  "length": 25
                }
              ]
            }
          }
        },
        {
          "name": "Else, elif part in if statement",
          "stepic_id": 98688,
          "task_files": {
            "else_elif.py": {
              "name": "else_elif.py",
              "text": "x \u003d 28\n\nif x \u003c 0:\n    print(\u0027x \u003c 0\u0027)                      # executes only if x \u003c 0\nelif x \u003d\u003d 0:\n    print(\u0027x is zero\u0027)                 # if it\u0027s not true that x \u003c 0, check if x \u003d\u003d 0\nelif x \u003d\u003d 1:\n    print(\u0027x \u003d\u003d 1\u0027)                    # if it\u0027s not true that x \u003c 0 and x !\u003d 0, check if x \u003d\u003d 1\nelse:\n    print(\u0027non of the above is true\u0027)\n\nname \u003d \"John\"\n\ncheck if name equal to \"John\"\n    print(True)\notherwise\n    print(False)\n",
              "placeholders": [
                {
                  "hint": "Use if keyword and \u003d\u003d operator.",
                  "additional_hints": [],
                  "possible_answer": "if name \u003d\u003d \u0027John\u0027:",
                  "offset": 352,
                  "length": 29
                },
                {
                  "hint": "Use else keyword.",
                  "additional_hints": [],
                  "possible_answer": "else:",
                  "offset": 398,
                  "length": 9
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 13423,
      "title": "Loops",
      "task_list": [
        {
          "name": "For loop",
          "stepic_id": 98707,
          "task_files": {
            "for_loop.py": {
              "name": "for_loop.py",
              "text": "for i in range(5):    # for each number i in range 0-4. range(5) function returns list [0, 1, 2, 3, 4]\n    print(i)          # this line is executed 5 times. First time i equals 0, then 1, ...\n\n\nprimes \u003d [2, 3, 5, 7]   # create new list\n\niterate over primes using for loop\n    print(prime)\n",
              "placeholders": [
                {
                  "hint": "Use for loop to iterate over \u0027primes\u0027.",
                  "additional_hints": [],
                  "possible_answer": "for prime in primes:",
                  "offset": 238,
                  "length": 34
                }
              ]
            }
          }
        },
        {
          "name": "For loop using string",
          "stepic_id": 98708,
          "task_files": {
            "for_string.py": {
              "name": "for_string.py",
              "text": "hello_world \u003d \"Hello, World!\"\n\nfor ch in hello_world:    # print each character from hello_world\n    print(ch)\n\nlength \u003d 0      # initialize length variable\n\ncount how many characters are in the hello_world using loop\n    length +\u003d 1     # add 1 to the length on each iteration\n\nprint(len(hello_world) \u003d\u003d length)",
              "placeholders": [
                {
                  "hint": "Use for loop to iterate over \u0027hello_world\u0027 string.",
                  "additional_hints": [],
                  "possible_answer": "for ch in hello_world:",
                  "offset": 158,
                  "length": 59
                }
              ]
            }
          }
        },
        {
          "name": "While loop",
          "stepic_id": 98709,
          "task_files": {
            "while_loop.py": {
              "name": "while_loop.py",
              "text": "square \u003d 1\n\nwhile square \u003c\u003d 10:\n    print(square)    # This code is executed 10 times\n    square +\u003d 1      # This code is executed 10 times\n\nprint(\"Finished\")  # This code is executed once\n\nsquare \u003d 0\nnumber \u003d 1\n\nprint all squares from 0 to 99\n    square \u003d number ** 2\n    print(square)\n    number +\u003d 1\n",
              "placeholders": [
                {
                  "hint": "Check if \u0027number\u0027 is strictly less than 10 in condition.",
                  "additional_hints": [],
                  "possible_answer": "while number \u003c 10:",
                  "offset": 213,
                  "length": 30
                }
              ]
            }
          }
        },
        {
          "name": "Break keyword",
          "stepic_id": 98710,
          "task_files": {
            "break_keyword.py": {
              "name": "break_keyword.py",
              "text": "count \u003d 0\n\nwhile True:  # this condition cannot possibly be false\n    print(count)\n    count +\u003d 1\n    if count \u003e\u003d 5:\n        break           # exit loop if count \u003e\u003d 5\n\n\nzoo \u003d [\"lion\", \u0027tiger\u0027, \u0027elephant\u0027]\nwhile True:                         # this condition cannot possibly be false\n    animal \u003d zoo.pop()       # extract one element from the list end\n    print(animal)\n    if exit loop if animal is \u0027elephant\u0027:\n        break           # exit loop\n",
              "placeholders": [
                {
                  "hint": "Use \u003d\u003d to check if animal is equal to \u0027elephant\u0027.",
                  "additional_hints": [],
                  "possible_answer": "animal \u003d\u003d \u0027elephant\u0027",
                  "offset": 377,
                  "length": 33
                }
              ]
            }
          }
        },
        {
          "name": "Continue keyword",
          "stepic_id": 98711,
          "task_files": {
            "continue_keyword.py": {
              "name": "continue_keyword.py",
              "text": "for i in range(5):\n    if i \u003d\u003d 3:\n        continue   # skip the rest of the code inside loop for current i value\n    print(i)\n\nfor x in range(10):\n    if Check if x is even:\n        continue   # skip print(x) for this loop\n    print(x)\n",
              "placeholders": [
                {
                  "hint": "Use % operator to check if x is even.",
                  "additional_hints": [],
                  "possible_answer": "x % 2 \u003d\u003d 0",
                  "offset": 154,
                  "length": 18
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 13424,
      "title": "Functions",
      "task_list": [
        {
          "name": "Definition",
          "stepic_id": 98712,
          "task_files": {
            "functions.py": {
              "name": "functions.py",
              "text": "def hello_world():  # function named my_function\n    print(\"Hello, World!\")\n\nfor i in range(5):\n    hello_world()   # call function defined above 5 times\n\nprint(\u0027I want to be a function\u0027)\nprint(\u0027I want to be a function\u0027)\nprint(\u0027I want to be a function\u0027)\n\n\ndefine a function named \u0027fun\u0027 to replace three lines above\n    print(\u0027I want to be a function\u0027)\n\nfor i in range(3):\n    fun()\n",
              "placeholders": [
                {
                  "hint": "Use \u0027def\u0027 keyword to define \u0027fun\u0027 function.",
                  "additional_hints": [],
                  "possible_answer": "def fun():",
                  "offset": 256,
                  "length": 58
                }
              ]
            }
          }
        },
        {
          "name": "Parameters and call arguments",
          "stepic_id": 98713,
          "task_files": {
            "param_args.py": {
              "name": "param_args.py",
              "text": "def foo(x):                 # x is a function parameter\n    print(\"x \u003d \" + str(x))\n\nfoo(5)   # pass 5 to foo(). Here 5 is an argument passed to function foo.\n\ndefine a function named \u0027square\u0027 that prints square of passed parameter\n    print(x ** 2)\n\nsquare(4)\nsquare(8)\nsquare(15)\nsquare(23)\nsquare(42)\n",
              "placeholders": [
                {
                  "hint": "Put parameter \u0027x\u0027 inside parentheses in function definition.",
                  "additional_hints": [],
                  "possible_answer": "def square(x):",
                  "offset": 159,
                  "length": 71
                }
              ]
            }
          }
        },
        {
          "name": "Return value",
          "stepic_id": 98714,
          "task_files": {
            "return_keyword.py": {
              "name": "return_keyword.py",
              "text": "def sum_two_numbers(a, b):\n    return a + b            # return result to the function caller\n\nc \u003d sum_two_numbers(3, 12)  # assign result of function execution to variable \u0027c\u0027\n\n\ndef fib(n):\n    \"\"\"This is documentation string for function. It\u0027ll be available by fib.__doc__()\n    Return a list containing the Fibonacci series up to n.\"\"\"\n    result \u003d []\n    a \u003d 1\n    b \u003d initialize variable b\n    while a \u003c n:\n        result.append(a)\n        tmp_var \u003d b\n        update variable b\n        update variable a\n    return result\n\nprint(fib(10))\n",
              "placeholders": [
                {
                  "hint": "Initialize \u0027b\u0027 with 1.",
                  "additional_hints": [],
                  "possible_answer": "1",
                  "offset": 373,
                  "length": 21
                },
                {
                  "hint": "Update \u0027b\u0027 with \u0027a + b\u0027.",
                  "additional_hints": [],
                  "possible_answer": "b \u003d a + b",
                  "offset": 465,
                  "length": 17
                },
                {
                  "hint": "Update \u0027a\u0027 with \u0027tmp_var\u0027.",
                  "additional_hints": [],
                  "possible_answer": "a \u003d tmp_var",
                  "offset": 491,
                  "length": 17
                }
              ]
            }
          }
        },
        {
          "name": "Default parameters",
          "stepic_id": 98715,
          "task_files": {
            "default_parameter.py": {
              "name": "default_parameter.py",
              "text": "def multiply_by(a, b\u003d2):\n    return a * b\n\nprint(multiply_by(3, 47))\nprint(multiply_by(3))    # call function using default value for b parameter\n\n\ndef hello(add parameters for function, set default value for name):\n    print(\"Hello %s! My name is %s\" % (subject, name))\n\nhello(\"PyCharm\", \"Jane\")    # call \u0027hello\u0027 function with \"PyCharm as a subject parameter and \"Jane\" as a name\nhello(\"PyCharm\")            # call \u0027hello\u0027 function with \"PyCharm as a subject parameter and default value for the name\n",
              "placeholders": [
                {
                  "hint": "Set default value for parameter \u0027name\u0027.",
                  "additional_hints": [],
                  "possible_answer": "subject, name\u003d\u0027John\u0027",
                  "offset": 158,
                  "length": 55
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 13425,
      "title": "Classes and objects",
      "task_list": [
        {
          "name": "Definition",
          "stepic_id": 98725,
          "task_files": {
            "class_definition.py": {
              "name": "class_definition.py",
              "text": "class MyClass:\n    variable \u003d assign any value to variable\n\n    def foo(self):   # we\u0027ll explain self parameter later in task 4\n        print(\"Hello from function foo\")\n\nmy_object \u003d MyClass()  # variable \"my_object\" holds an object of the class \"MyClass\" that contains the variable and the \"foo\" function\n",
              "placeholders": [
                {
                  "hint": "Assign any value to variable.",
                  "additional_hints": [],
                  "possible_answer": "4",
                  "offset": 30,
                  "length": 28
                }
              ]
            }
          }
        },
        {
          "name": "Variable access",
          "stepic_id": 98726,
          "task_files": {
            "access_variable.py": {
              "name": "access_variable.py",
              "text": "class MyClass:\n    variable1 \u003d 1\n    variable2 \u003d 2\n\n    def foo(self):     # we\u0027ll explain self parameter later in task 4\n        print(\"Hello from function foo\")\n\nmy_object \u003d MyClass()\nmy_object1 \u003d MyClass()\n\nmy_object.variable2 \u003d 3     # change value stored in variable2 in my_object\n\nprint(my_object.variable2)\nprint(my_object1.variable2)\n\nmy_object.foo()   # call method foo() of object my_object\n\nprint(value of variable1 from my_object)\n\n",
              "placeholders": [
                {
                  "hint": "Access \u0027variable1\u0027 using my_object.variable1",
                  "additional_hints": [],
                  "possible_answer": "my_object.variable1",
                  "offset": 408,
                  "length": 33
                }
              ]
            }
          }
        },
        {
          "name": "Variable access",
          "stepic_id": 98727,
          "task_files": {
            "access_variable.py": {
              "name": "access_variable.py",
              "text": "class Car:\n    color \u003d \"\"\n    def description(self):\n        description_string \u003d \"This is a %s car.\" % self.color    # we\u0027ll explain self parameter later in task 4\n        return description_string\n\ncar1 \u003d Car()\ncar2 \u003d create object of Car\n\ncar1.color \u003d \"blue\"\nset car2 color\n\nprint(car1.description())\nprint(car2.description())\n",
              "placeholders": [
                {
                  "hint": "Create new car using Car()",
                  "additional_hints": [],
                  "possible_answer": "Car()",
                  "offset": 220,
                  "length": 20
                },
                {
                  "hint": "Change color using car2.color \u003d \"new color\".",
                  "additional_hints": [],
                  "possible_answer": "car2.color \u003d \"red\"",
                  "offset": 262,
                  "length": 14
                }
              ]
            }
          }
        },
        {
          "name": "Self explanation",
          "stepic_id": 98728,
          "task_files": {
            "self_parameter.py": {
              "name": "self_parameter.py",
              "text": "class Complex:\n    def create(self, real_part, imag_part):\n        self.r \u003d real_part\n        self.i \u003d imag_part\n\nclass Calculator:\n    current \u003d 0\n\n    def add(self, amount):\n        add number to current\n\n    def get_current(self):\n        return self.current\n",
              "placeholders": [
                {
                  "hint": "Add amount to the self.current variable.",
                  "additional_hints": [],
                  "possible_answer": "self.current +\u003d amount",
                  "offset": 184,
                  "length": 21
                }
              ]
            }
          }
        },
        {
          "name": "Special __init__ method",
          "stepic_id": 98729,
          "task_files": {
            "init_method.py": {
              "name": "init_method.py",
              "text": "class Square:\n\n    def __init__(self):    # special method __init__\n        self.sides \u003d 4\n\nsquare \u003d Square()\nprint(square.sides)\n\nclass Car:\n    def __init__(add parameters here):\n        self.color \u003d color\n\ncar \u003d Car(\"blue\")    # Note: you should not pass self parameter explicitly, only color parameter\n\nprint(car.color)\n",
              "placeholders": [
                {
                  "hint": "Add two parameters -- self and color.",
                  "additional_hints": [],
                  "possible_answer": "self, color",
                  "offset": 159,
                  "length": 19
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 13427,
      "title": "Modules and packages",
      "task_list": [
        {
          "name": "Import module",
          "stepic_id": 98730,
          "task_files": {
            "my_module.py": {
              "name": "my_module.py",
              "text": "\"\"\" documentation string for module my_module\nThis module contains hello_world function\n\"\"\"\n\n\ndef hello_world(name):\n    print(\"Hello, World! My name is %s\" % name)",
              "placeholders": []
            },
            "imports.py": {
              "name": "imports.py",
              "text": "\nimport calculator\n\ncalc \u003d calculator.Calculator()    # create new instance of Calculator class defined in calculator module\ncalc.add(2)\nprint(calc.get_current())\n\nhere import my_module\n\ncall function hello_world from my_module\n",
              "placeholders": [
                {
                  "hint": "Use \u0027import\u0027 keyword and my_module reference.",
                  "additional_hints": [],
                  "possible_answer": "import my_module",
                  "offset": 164,
                  "length": 21
                },
                {
                  "hint": "Access \u0027hello_world\u0027 function from module \u0027my_module\u0027 as my_module.hello_world()",
                  "additional_hints": [],
                  "possible_answer": "my_module.hello_world(\u0027John\u0027)",
                  "offset": 187,
                  "length": 40
                }
              ]
            },
            "calculator.py": {
              "name": "calculator.py",
              "text": "\"\"\"\nThis module contains Calculator class\n\"\"\"\n\n\nclass Calculator:\n    def __init__(self):\n        self.current \u003d 0\n\n    def add(self, amount):\n        self.current +\u003d amount\n\n    def get_current(self):\n        return self.current",
              "placeholders": []
            }
          }
        },
        {
          "name": "Builtin modules",
          "stepic_id": 98731,
          "task_files": {
            "builtin_modules.py": {
              "name": "builtin_modules.py",
              "text": "import datetime\n\nprint(current date)\n",
              "placeholders": [
                {
                  "hint": "Use datetime.datetime.today() function.",
                  "additional_hints": [],
                  "possible_answer": "datetime.datetime.today()",
                  "offset": 23,
                  "length": 12
                }
              ]
            }
          }
        },
        {
          "name": "From import",
          "stepic_id": 98732,
          "task_files": {
            "my_module.py": {
              "name": "my_module.py",
              "text": "\"\"\" documentation string for module my_module\nThis module contains hello_world function\n\"\"\"\n\n\ndef hello_world():\n    return \"Hello, World!\"",
              "placeholders": []
            },
            "calculator.py": {
              "name": "calculator.py",
              "text": "\"\"\"\nThis module contains Calculator class\n\"\"\"\n\n\nclass Calculator:\n    def __init__(self):\n        self.current \u003d 0\n\n    def add(self, amount):\n        self.current +\u003d amount\n\n    def get_current(self):\n        return self.current",
              "placeholders": []
            },
            "from_import.py": {
              "name": "from_import.py",
              "text": "\nfrom calculator import Calculator\n\ncalc \u003d Calculator()    # here we can use Calculator class directly without prefix calculator.\ncalc.add(2)\nprint(calc.get_current())\n\nimport hello_world from my_module\n\nprint(hello_world())    # Note: hello_world function used without prefix\n",
              "placeholders": [
                {
                  "hint": "Use \u0027from my_module import hello_world\u0027",
                  "additional_hints": [],
                  "possible_answer": "from my_module import hello_world",
                  "offset": 169,
                  "length": 33
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 13428,
      "title": "File input/output",
      "task_list": [
        {
          "name": "Read file",
          "stepic_id": 98733,
          "task_files": {
            "input.txt": {
              "name": "input.txt",
              "text": "I am a temporary file. Maybe someday, I\u0027ll become a real file.",
              "placeholders": []
            },
            "input1.txt": {
              "name": "input1.txt",
              "text": "My first line\nMy second line\nMy third line",
              "placeholders": []
            },
            "read_file.py": {
              "name": "read_file.py",
              "text": "\nf \u003d open(\"input.txt\", \"r\")   # here we open file \"input.txt\". Second argument used to identify that we want to read file\n                             # Note: if you want to write to the file use \"w\" as second argument\n\nfor line in f.readlines():   # read lines\n    print each line\n\nf.close()                   # It\u0027s important to close the file to free up any system resources.\n\nf1 \u003d open(\"input1.txt\", \"r\")\n\nprint only first line of f1\n\ndo not forget to close file\n",
              "placeholders": [
                {
                  "hint": "Use print function.",
                  "additional_hints": [],
                  "possible_answer": "print(line)",
                  "offset": 266,
                  "length": 15
                },
                {
                  "hint": "Use \u0027readline\u0027 method.",
                  "additional_hints": [],
                  "possible_answer": "print(f1.readline())",
                  "offset": 410,
                  "length": 27
                },
                {
                  "hint": "Use f1.close() method.",
                  "additional_hints": [],
                  "possible_answer": "f1.close()",
                  "offset": 439,
                  "length": 27
                }
              ]
            }
          }
        },
        {
          "name": "Write to file",
          "stepic_id": 98734,
          "task_files": {
            "output.txt": {
              "name": "output.txt",
              "text": "This is output file.\n",
              "placeholders": []
            },
            "write_to_file.py": {
              "name": "write_to_file.py",
              "text": "zoo \u003d [\u0027lion\u0027, \"elephant\", \u0027monkey\u0027]\n\nif __name__ \u003d\u003d \"__main__\":\n    f \u003d open(\"output.txt\", add modifier)\n\n    for i in zoo:\n        add the whole zoo to the output.txt\n\n    close the file\n",
              "placeholders": [
                {
                  "hint": "Use \u0027a\u0027 modifier to append lines to the end of file.",
                  "additional_hints": [],
                  "possible_answer": "\u0027a\u0027",
                  "offset": 92,
                  "length": 12
                },
                {
                  "hint": "Use \u0027write\u0027 method.",
                  "additional_hints": [],
                  "possible_answer": "f.write(i)",
                  "offset": 133,
                  "length": 35
                },
                {
                  "hint": "Call f.close method.",
                  "additional_hints": [],
                  "possible_answer": "f.close()",
                  "offset": 174,
                  "length": 14
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "authors": [
    {}
  ],
  "description": "Introduction course to Python",
  "name": "Introduction to Python",
  "id": 238,
  "isAdaptive": false,
  "language": "Python"
}