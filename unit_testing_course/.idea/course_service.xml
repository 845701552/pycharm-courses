<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CCProjectService">
    <option name="course">
      <Course>
        <option name="description" value="An introductory interactive course about unit testing in Python." />
        <option name="lessons">
          <list>
            <Lesson>
              <option name="index" value="1" />
              <option name="name" value="Introduction" />
              <option name="taskList">
                <list>
                  <Task>
                    <option name="index" value="1" />
                    <option name="name" value="Hello, World!" />
                    <option name="taskFiles">
                      <map>
                        <entry key="hello_world.py">
                          <value>
                            <TaskFile>
                              <option name="answerPlaceholders">
                                <list>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="Don't print the required text; return it." />
                                    <option name="index" value="1" />
                                    <option name="length" value="24" />
                                    <option name="line" value="2" />
                                    <option name="possibleAnswer" value="return &quot;Hello, World!&quot;" />
                                    <option name="start" value="4" />
                                    <option name="taskText" value="implement this function!" />
                                  </AnswerPlaceholder>
                                </list>
                              </option>
                              <option name="highlightErrors" value="true" />
                              <option name="name" value="hello_world.py" />
                              <option name="text" value="# this is the function that we will be testing&#10;def hello_world():&#10;    implement this function!&#10;&#10;&#10;# import the unittest module, which we will use to write our tests&#10;import unittest&#10;&#10;&#10;# With unittest, tests are grouped as methods of classes.&#10;# Each such class must be a sub-class of 'unittest.TestCase'.&#10;# And that's about all you need to know about these classes!&#10;class TestHelloWorld(unittest.TestCase):&#10;    &quot;&quot;&quot;Tests for the hello_world() function&quot;&quot;&quot;&#10;&#10;    # Each test is written as a method with a name beginning with &quot;test_&quot;&#10;    def test_return_value(self):&#10;        # Writing a doc-string for each test, explaining what it tests,&#10;        # is a good idea.&#10;        &quot;&quot;&quot;test that hello_world() returns 'Hello, World!'&quot;&quot;&quot;&#10;&#10;        # self.assertEqual() will make the test fail if the arguments are not equal.&#10;        self.assertEqual(hello_world(), &quot;Hello, World!&quot;)&#10;&#10;        # If no assertions fail, the test passes successfully. Note that this&#10;        # happens automatically; we don't have to return a value or anything&#10;        # of the sort.&#10;" />
                            </TaskFile>
                          </value>
                        </entry>
                      </map>
                    </option>
                  </Task>
                  <Task>
                    <option name="index" value="2" />
                    <option name="name" value="Your first unit test" />
                    <option name="taskFiles">
                      <map>
                        <entry key="test_hello_someone.py">
                          <value>
                            <TaskFile>
                              <option name="answerPlaceholders">
                                <list>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="use self.assertEqual() to compare the function output to the expected value" />
                                    <option name="index" value="1" />
                                    <option name="length" value="94" />
                                    <option name="line" value="7" />
                                    <option name="possibleAnswer" value="self.assertEqual(hello_someone(&quot;World&quot;), &quot;Hello, World!&quot;)" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="test that the function returns &quot;Hello, World!&quot; when called with the appropriate input argument" />
                                  </AnswerPlaceholder>
                                </list>
                              </option>
                              <option name="highlightErrors" value="true" />
                              <option name="name" value="test_hello_someone.py" />
                              <option name="text" value="import unittest&#10;&#10;from hello_someone import hello_someone&#10;&#10;&#10;class TestHelloWorld(unittest.TestCase):&#10;    def test_hello_world(self):&#10;        test that the function returns &quot;Hello, World!&quot; when called with the appropriate input argument&#10;" />
                            </TaskFile>
                          </value>
                        </entry>
                      </map>
                    </option>
                  </Task>
                  <Task>
                    <option name="index" value="3" />
                    <option name="name" value="The possible test results" />
                    <option name="taskFiles">
                      <map>
                        <entry key="possible_test_results.py">
                          <value>
                            <TaskFile>
                              <option name="answerPlaceholders">
                                <list>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="to succeed, a test just needs not to fail or raise an error" />
                                    <option name="index" value="1" />
                                    <option name="length" value="31" />
                                    <option name="line" value="5" />
                                    <option name="possibleAnswer" value="pass" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="write a test which will succeed" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="lesson1task3possible_test_results_2" />
                                    <option name="index" value="2" />
                                    <option name="length" value="28" />
                                    <option name="line" value="8" />
                                    <option name="possibleAnswer" value="self.assertEqual(True, False)" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="write a test which will fail" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="A test is erroneous if it raises an exception (without catching it)&#10;" />
                                    <option name="index" value="3" />
                                    <option name="length" value="38" />
                                    <option name="line" value="11" />
                                    <option name="possibleAnswer" value="raise Exception()" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="write a test which will cause an error" />
                                  </AnswerPlaceholder>
                                </list>
                              </option>
                              <option name="highlightErrors" value="true" />
                              <option name="name" value="possible_test_results.py" />
                              <option name="text" value="import unittest&#10;&#10;&#10;class TestPossibleResults(unittest.TestCase):&#10;    def test_success(self):&#10;        write a test which will succeed&#10;&#10;    def test_failure(self):&#10;        write a test which will fail&#10;&#10;    def test_error(self):&#10;        write a test which will cause an error&#10;" />
                            </TaskFile>
                          </value>
                        </entry>
                      </map>
                    </option>
                  </Task>
                </list>
              </option>
            </Lesson>
            <Lesson>
              <option name="index" value="2" />
              <option name="name" value="Assertion Types" />
              <option name="taskList">
                <list>
                  <Task>
                    <option name="index" value="1" />
                    <option name="name" value="Assertion Types" />
                    <option name="taskFiles">
                      <map>
                        <entry key="truthiness.py">
                          <value>
                            <TaskFile>
                              <option name="answerPlaceholders">
                                <list>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="use self.assertFalse" />
                                    <option name="index" value="1" />
                                    <option name="length" value="16" />
                                    <option name="line" value="6" />
                                    <option name="possibleAnswer" value="self.assertFalse(0)" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="write this test!" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="index" value="2" />
                                    <option name="length" value="16" />
                                    <option name="line" value="10" />
                                    <option name="possibleAnswer" value="self.assertTrue(1)" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="write this test!" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="index" value="3" />
                                    <option name="length" value="16" />
                                    <option name="line" value="14" />
                                    <option name="possibleAnswer" value="self.assertTrue(3)" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="write this test!" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="None's truthiness is False&#10;" />
                                    <option name="index" value="4" />
                                    <option name="length" value="10" />
                                    <option name="line" value="20" />
                                    <option name="possibleAnswer" value="False" />
                                    <option name="start" value="19" />
                                    <option name="taskText" value="MethodName" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="index" value="5" />
                                    <option name="length" value="33" />
                                    <option name="line" value="30" />
                                    <option name="possibleAnswer" value="False" />
                                    <option name="start" value="19" />
                                    <option name="taskText" value="choose the proper assetion method" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="index" value="6" />
                                    <option name="length" value="33" />
                                    <option name="line" value="31" />
                                    <option name="possibleAnswer" value="True" />
                                    <option name="start" value="19" />
                                    <option name="taskText" value="choose the proper assetion method" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="index" value="7" />
                                    <option name="length" value="49" />
                                    <option name="line" value="34" />
                                    <option name="possibleAnswer" value="self._test_container_class([], [False])" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="implement this test using _test_container_class()" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="index" value="8" />
                                    <option name="length" value="49" />
                                    <option name="line" value="37" />
                                    <option name="possibleAnswer" value="self._test_container_class((), (False,))" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="implement this test using _test_container_class()" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="index" value="9" />
                                    <option name="length" value="49" />
                                    <option name="line" value="40" />
                                    <option name="possibleAnswer" value="self._test_container_class(set(), {False})" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="implement this test using _test_container_class()" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="index" value="10" />
                                    <option name="length" value="49" />
                                    <option name="line" value="43" />
                                    <option name="possibleAnswer" value="self._test_container_class({}, {False: False})" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="implement this test using _test_container_class()" />
                                  </AnswerPlaceholder>
                                </list>
                              </option>
                              <option name="highlightErrors" value="true" />
                              <option name="name" value="truthiness.py" />
                              <option name="text" value="import unittest&#10;&#10;&#10;class TestIntegerTruthiness(unittest.TestCase):&#10;    def test_zero(self):&#10;        &quot;&quot;&quot;check that the thruthiness of the integer zero is False&quot;&quot;&quot;&#10;        write this test!&#10;&#10;    def test_one(self):&#10;        &quot;&quot;&quot;check that the thruthiness of the integer one is True&quot;&quot;&quot;&#10;        write this test!&#10;&#10;    def test_other_value(self):&#10;        &quot;&quot;&quot;check the thruthiness of an integer other than zero&quot;&quot;&quot;&#10;        write this test!&#10;&#10;&#10;class TestNoneTruthiness(unittest.TestCase):&#10;    def test_none(self):&#10;        &quot;&quot;&quot;check the thruthiness of None&quot;&quot;&quot;&#10;        self.assertMethodName(None)&#10;&#10;&#10;class TestContainerTruthiness(unittest.TestCase):&#10;    # Note:&#10;    # -----&#10;    # Methods whose name starts with &quot;_test&quot; are not considered test methods,&#10;    # just like all methods whose name doesn't begin with &quot;test&quot;.&#10;&#10;    def _test_container_class(self, empty_container, non_empty_container):&#10;        self.assertchoose the proper assetion method(empty_container)&#10;        self.assertchoose the proper assetion method(non_empty_container)&#10;&#10;    def test_list(self):&#10;        implement this test using _test_container_class()&#10;&#10;    def test_tuple(self):&#10;        implement this test using _test_container_class()&#10;&#10;    def test_set(self):&#10;        implement this test using _test_container_class()&#10;&#10;    def test_dict(self):&#10;        implement this test using _test_container_class()&#10;" />
                            </TaskFile>
                          </value>
                        </entry>
                      </map>
                    </option>
                  </Task>
                  <Task>
                    <option name="index" value="2" />
                    <option name="name" value="Comparison Assertions" />
                    <option name="taskFiles">
                      <map>
                        <entry key="comparison_assertions.py">
                          <value>
                            <TaskFile>
                              <option name="answerPlaceholders">
                                <list>
                                  <AnswerPlaceholder>
                                    <option name="index" value="1" />
                                    <option name="length" value="16" />
                                    <option name="line" value="10" />
                                    <option name="possibleAnswer" value="for n_attempt in range(100):&#10;            value = random_not_42()&#10;            self.assertNotEqual(value, 42)" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="write this test!" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="use only assertIsNone and assertIsNotNone" />
                                    <option name="index" value="2" />
                                    <option name="length" value="16" />
                                    <option name="line" value="53" />
                                    <option name="possibleAnswer" value="self.assertIsNotNone(find_foo('foo'))" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="write this test!" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="use only assertIsNone and assertIsNotNone" />
                                    <option name="index" value="3" />
                                    <option name="length" value="16" />
                                    <option name="line" value="57" />
                                    <option name="possibleAnswer" value="for s in self.strings_with_foo:&#10;            self.assertIsNotNone(find_foo(s))" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="write this test!" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="use only assertIsNone and assertIsNotNone" />
                                    <option name="index" value="4" />
                                    <option name="length" value="16" />
                                    <option name="line" value="61" />
                                    <option name="possibleAnswer" value="for s in self.strings_without_foo:&#10;            self.assertIsNone(find_foo(s))" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="write this test!" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="index" value="5" />
                                    <option name="length" value="24" />
                                    <option name="line" value="73" />
                                    <option name="possibleAnswer" value="self.assertGreaterEqual(value, start)&#10;            self.assertLessEqual(value, end)" />
                                    <option name="start" value="12" />
                                    <option name="taskText" value="check the returned value" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="index" value="6" />
                                    <option name="length" value="24" />
                                    <option name="line" value="85" />
                                    <option name="possibleAnswer" value="self.assertGreater(value, start)&#10;            self.assertLess(value, end)" />
                                    <option name="start" value="12" />
                                    <option name="taskText" value="check the returned value" />
                                  </AnswerPlaceholder>
                                </list>
                              </option>
                              <option name="highlightErrors" value="true" />
                              <option name="name" value="comparison_assertions.py" />
                              <option name="text" value="import random&#10;import unittest&#10;&#10;from tested_code import random_not_42, find_foo, \&#10;    random_float_between_inclusive, random_float_between_noninclusive&#10;&#10;&#10;class TestRandomNot42(unittest.TestCase):&#10;    def test_many_values(self):&#10;        &quot;&quot;&quot;call the function 100 times and make sure the result isn't 42&quot;&quot;&quot;&#10;        write this test!&#10;&#10;&#10;class TestFindFoo(unittest.TestCase):&#10;    &quot;&quot;&quot;tests for the find_foo() function&#10;&#10;    find_foo(s) returns an object if &quot;foo&quot; is a sub-string of s,&#10;    and None otherwise.&#10;    &quot;&quot;&quot;&#10;    # valid_names = [&#10;    #     'foo',&#10;    #     'Bar',&#10;    #     'foorBar',&#10;    #     'foo_bar',&#10;    #     '_fooBar',&#10;    #     'foo1',&#10;    #     'foo_',&#10;    # ]&#10;    #&#10;    # invalid_names = [&#10;    #     '1foo',&#10;    #     'foo-bar',&#10;    #     '$foo',&#10;    #     'foo bar',&#10;    #     'foo+bar4ever',&#10;    # ]&#10;&#10;    strings_with_foo = [&#10;        'foo',&#10;        'aaa foo bbb',&#10;        'aaa foo',&#10;        'foo bbb',&#10;        'no foo for you, come back oen year!'&#10;    ]&#10;&#10;    strings_without_foo = [&#10;        'boo',&#10;        'aaa bbb',&#10;        'four',&#10;    ]&#10;&#10;    def test_identical(self):&#10;        &quot;&quot;&quot;check that find_foo finds 'foo' in 'foo'&quot;&quot;&quot;&#10;        write this test!&#10;&#10;    def test_strings_with_foo(self):&#10;        &quot;&quot;&quot;check that find_foo finds 'foo' in all of the strings with 'foo'&quot;&quot;&quot;&#10;        write this test!&#10;&#10;    def test_strings_without_foo(self):&#10;        &quot;&quot;&quot;check that find_foo finds 'foo' in all of the strings with 'foo'&quot;&quot;&quot;&#10;        write this test!&#10;&#10;&#10;class TestRandomFloatBetweenInclusive(unittest.TestCase):&#10;    def test_random_values(self):&#10;        for i in range(100):&#10;            start = random.random()&#10;            end = random.random()&#10;            if start &gt; end:&#10;                start, end = end, start&#10;            value = random_float_between_inclusive(start, end)&#10;&#10;            check the returned value&#10;&#10;&#10;class TestRandomFloatBetweenNoninclusive(unittest.TestCase):&#10;    def test_random_values(self):&#10;        for i in range(100):&#10;            start = random.random()&#10;            end = random.random()&#10;            if start &gt; end:&#10;                start, end = end, start&#10;            value = random_float_between_noninclusive(start, end)&#10;&#10;            check the returned value&#10;" />
                            </TaskFile>
                          </value>
                        </entry>
                      </map>
                    </option>
                  </Task>
                  <Task>
                    <option name="index" value="3" />
                    <option name="name" value="Container Assertions" />
                    <option name="taskFiles">
                      <map>
                        <entry key="container_assertions.py">
                          <value>
                            <TaskFile>
                              <option name="answerPlaceholders">
                                <list>
                                  <AnswerPlaceholder>
                                    <option name="index" value="1" />
                                    <option name="length" value="20" />
                                    <option name="line" value="70" />
                                    <option name="possibleAnswer" value="self.assertCountEqual(random_shuffle([]), [])" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="implement this test!" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="make sure to test with lists of various lengths" />
                                    <option name="index" value="2" />
                                    <option name="length" value="20" />
                                    <option name="line" value="74" />
                                    <option name="possibleAnswer" value="for i in range(10):&#10;            self.assertEqual(len(random_shuffle(list(range(i)))), i)" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="implement this test!" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="make sure to check with a list of values where some values appear more than once" />
                                    <option name="index" value="3" />
                                    <option name="length" value="20" />
                                    <option name="line" value="79" />
                                    <option name="possibleAnswer" value="self.assertCountEqual(random_shuffle(values), values)" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="implement this test!" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="one way to do this is to create a large list of values, shuffle it, and compare the result to the original" />
                                    <option name="index" value="4" />
                                    <option name="length" value="20" />
                                    <option name="line" value="83" />
                                    <option name="possibleAnswer" value="values = list(range(100))&#10;        self.assertNotEqual(random_shuffle(values), values)" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="implement this test!" />
                                  </AnswerPlaceholder>
                                  <AnswerPlaceholder>
                                    <option name="hint" value="create a (long) list of values, pass it to the function, and check that doing so did not change original list" />
                                    <option name="index" value="5" />
                                    <option name="length" value="20" />
                                    <option name="line" value="87" />
                                    <option name="possibleAnswer" value="values = list(range(100))&#10;        random_shuffle(values)&#10;        self.assertEqual(values, list(range(100)))" />
                                    <option name="start" value="8" />
                                    <option name="taskText" value="implement this test!" />
                                  </AnswerPlaceholder>
                                </list>
                              </option>
                              <option name="highlightErrors" value="true" />
                              <option name="name" value="container_assertions.py" />
                              <option name="text" value="import unittest&#10;import random&#10;&#10;&#10;def random_shuffle(values):&#10;    &quot;&quot;&quot;return a new list of the given values in random order&quot;&quot;&quot;&#10;    new_values = list(values)&#10;    random.shuffle(new_values)&#10;    return new_values&#10;&#10;&#10;def broken_shuffle_1(values):&#10;    &quot;&quot;&quot;this doesn't actually shuffle anything!&quot;&quot;&quot;&#10;    return list(values)&#10;&#10;&#10;def broken_shuffle_2(values):&#10;    &quot;&quot;&quot;this returns a single instance of each value, shuffled&quot;&quot;&quot;&#10;    new_values = list(set(values))&#10;    random.shuffle(new_values)&#10;    return new_values&#10;&#10;&#10;def broken_shuffle_3(values):&#10;    &quot;&quot;&quot;this always returns the values sorted&quot;&quot;&quot;&#10;    return list(sorted(values))&#10;&#10;&#10;def broken_shuffle_4(values):&#10;    &quot;&quot;&quot;this shuffles the values and returns a new list, but also changes the given list&quot;&quot;&quot;&#10;    random.shuffle(values)&#10;    return list(values)&#10;&#10;&#10;def broken_shuffle_5(values):&#10;    &quot;&quot;&quot;this shuffles the given list of values and returns it&quot;&quot;&quot;&#10;    random.shuffle(values)&#10;    return values&#10;&#10;&#10;def broken_shuffle_6(values):&#10;    &quot;&quot;&quot;this returns a list of the same length but with unrelated values&quot;&quot;&quot;&#10;    new_values = list(range(len(values)))&#10;    random.shuffle(new_values)&#10;    return new_values&#10;&#10;&#10;def broken_shuffle_7(values):&#10;    &quot;&quot;&quot;this is broken in a hard to find way...&quot;&quot;&quot;&#10;    new_values = []&#10;    while True:&#10;        value_index = random.randrange(0, len(values))&#10;        new_values.append(values.pop(value_index))&#10;        if len(values) == 0:&#10;            break&#10;    return new_values&#10;&#10;&#10;class TestRandomShuffle(unittest.TestCase):&#10;    &quot;&quot;&quot;unit tests for the random_shuffle() function&quot;&quot;&quot;&#10;&#10;    # IMPORTANT NOTE !!!&#10;    # In these tests, just call the random_shuffle() function&#10;    # when you want to call the tested function. Never call any&#10;    # of the &quot;broken_...&quot; functions; those are just here for you&#10;    # to look at. Don't worry, the tests will be run with them as&#10;    # well, using some deep magic ;)&#10;&#10;    def test_empty(self):&#10;        &quot;&quot;&quot;check that giving an empty list results in an empty list&quot;&quot;&quot;&#10;        implement this test!&#10;&#10;    def test_same_length(self):&#10;        &quot;&quot;&quot;check that the returned list is of the same length as the one givne&quot;&quot;&quot;&#10;        implement this test!&#10;&#10;    def test_same_values(self):&#10;        &quot;&quot;&quot;check that the values in the return list are the same&quot;&quot;&quot;&#10;        values = list(range(10)) + list(range(5)) + list(range(1))&#10;        implement this test!&#10;&#10;    def test_values_are_shuffled(self):&#10;        &quot;&quot;&quot;check that the function does actually return the values in a different order&quot;&quot;&quot;&#10;        implement this test!&#10;&#10;    def test_input_not_mutated(self):&#10;        &quot;&quot;&quot;check that the input list of values is not mutated&quot;&quot;&quot;&#10;        implement this test!&#10;" />
                            </TaskFile>
                          </value>
                        </entry>
                      </map>
                    </option>
                  </Task>
                </list>
              </option>
            </Lesson>
          </list>
        </option>
        <option name="name" value="Python Unit-Testing Course" />
      </Course>
    </option>
  </component>
</project>